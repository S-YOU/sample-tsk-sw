1. delayの導入
   既存delay処理のマクロ化
   
2. EL1(OS)への移行処理の追加[済み]
   https://qiita.com/kaizen_nagoya/items/9a0bd8a725de62682602
   https://groups.google.com/a/chromium.org/forum/#!topic/chromium-os-reviews/6tnea0ZUi6w
3. 既存delay処理の置き換え

4. HALの初期化の整理
   4.1. ブート直後の処理
   4.2. CPU初期化
   4.3. アイドルスレッドの初期化などカーネル本体初期化後のアーキ依存初期化処理
   4.4. ボード初期化
   4.5. デバイスの初期化

5. 遅延ディスパッチ, 割込み多重度の記録
   - 割込み・例外カウンタを可算/減算する必要がある[済み]
   - 割込み・例外カウンタが0の時で遅延ディスパッチ要求がある場合はリスケジュールする[済み]
   - スレッド起床要求時に割込み・例外カウンタが0でない場合やディスパッチ禁止状態の時は
     遅延ディスパッチ要求を立てる[済み]
   - idleスレッドのstackやstack_sizeをhalで設定する[済み]
   - 割込み中, 例外処理中, ディスパッチ禁止, 割込みまたは例外処理中の
     判定マクロを用意する[済み]
   - 割込み中またはディスパッチ禁止中でのスケジュールを抑止するように修正[済み]

6. 割込み・例外出口処理内で使用して良いレジスタに関する説明を書くこと
   割込み・例外出口処理からCの関数を呼び出して復帰してきた時点でレジスタの
   内容が書き換わらないことを保証する必要があるので, callee saved レジスタを使用する。
   ･Cの関数の呼出前後で保証されるレジスタ（呼び出された側で保証するレジスタ, 
    callee savedレジスタ)を使用する。
   ･割込み・例外の前後では汎用レジスタを全て退避復元する
   （カーネルが使用するレジスタを全て保証する必要がある)

7. kmallocの排他を行えるようにラッパー関数を作成[済み]

8. 多重割込み用の優先度の設定[済み]
   
割込みマージ
git diff -r 04d9fb37ea6c328f3747bec67d56efe195739c25
