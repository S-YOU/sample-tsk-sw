OUTPUT_FORMAT("elf64-littleaarch64", "elf64-bigaarch64", "elf64-littleaarch64")
OUTPUT_ARCH(aarch64)
KERN_VMA_BASE = 0x0000000000000000;
/* KERN_VMA_BASE = 0xffffffff00000000; */  /* for Straight map */
KERN_BASE = 0x40000000;

ENTRY(_start)
SECTIONS
{
	. = KERN_BASE;
	.boot : {
              *(.boot_text)
	      *(.boot_data)
	}
        . += KERN_VMA_BASE;
	.text : AT(ADDR(.text) - KERN_VMA_BASE) { *(.text) }
	.data : AT(ADDR(.data) - KERN_VMA_BASE) { *(.data) }
	. = ALIGN(__PAGE_SIZE__);
        __bss_start = .;
	.bss :  AT(ADDR(.bss) - KERN_VMA_BASE) {
 	. = ALIGN(__PAGE_SIZE__ * __KSTACK_PAGES__);
	bsp_stack = .;
	. += (__PAGE_SIZE__ * __KSTACK_PAGES__);
	bsp_stack_end = .;
	*(.bss COMMON) }
	. = ALIGN(__PAGE_SIZE__);
        __bss_end = .;
	_edata = .;			/* End of data section */
	. = ALIGN(__PAGE_SIZE__);
	_payload_start = .;
	.payload : { *(.payload) }
	_payload_end = .;
	. = ALIGN(__PAGE_SIZE__);
	_end = . ;
	_kend = .;
	_kheap_start = .;
	. += (__KHEAP_SIZE__);
	_kheap_end = .;
}

